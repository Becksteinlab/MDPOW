# default run input file for the the equilibrium simulation
# values can be overriden from your own configuration file

# XXX maybe define which queuing system to submit to, so that this can be
# XXX done automatically through GromacsWrapper.


[DEFAULT]
qscripts = local.sh
# This can be a comma-separet list; local.sh is the default script
# that comes with GromacsWrapper.
# xxx  maybe just use the default section for qscript?

[setup]

name = None
# common, descriptive name, e.g. benzene

molecule = None
# Gromacs [ molecule ] identifier from the itp file (typically a 3-letter code)

itp = None
# Gromacs itp file name 

structure = None
# coordinate file name (pdb, gro, ... anything that Gromacs can read)

maxwarn = 0
# maximum number of warnings tolerated by grompp during setup

gromacsoutput = False
# True: print output from Gromacs command to screen (useful for debugging)
# False: only show the MDPOW messages

[energy_minimize]

mdp = em_opls.mdp
# run parameter file for Gromacs;
# (will be searched as (1) absolute path, (2) in current directory (3)
# in the package templates)


[MD_relaxed]

qscript = %(qscripts)s
# queuing system scripts to produce

runlocal = True
# True: launch Gromacs mdrun and wait for it
# False: produce queuing system scripts and stop

runtime = 5
# run time in ps

mdp = NPT_opls.mdp
# run parameter file for Gromacs;
# (will be searched as (1) absolute path, (2) in current directory (3)
# in the package templates)
# special index groups  __main__ __environment__ can be used

[MD_NPT]

qscript = %(qscripts)s
# queuing system scripts to produce

runtime = 50000
# simulation run time in ps [50 ns is generous, probably can be shorter]

runlocal = False
# True: launch Gromacs mdrun and wait for it
# False: produce queuing system scripts and stop

mdp = NPT_opls.mdp
# run parameter file for Gromacs;
# (will be searched as (1) absolute path, (2) in current directory (3)
# in the package templates)
# special index groups  __main__ __environment__ can be used

[FEP]

qscript = %(qscripts)s
# queuing system scripts to produce

runtime = 5000
# run time in ps for each free energy window

runlocal = False
# True: launch Gromacs mdrun and run all windows in a serial fashion
# False: produce queuing system scripts and stop

maxwarn = 0
# maximum number of warnings tolerated by grompp during setting up FEP runs
# Set to 1 if you want to ignore the warning (in 4.6.x):
#
# WARNING 1 [file md.mdp]:
#  With coulomb soft core, the reciprocal space calculation will not
#  necessarily cancel.  It may be necessary to decrease the reciprocal space
#  energy, and increase the cutoff radius to get sufficiently close matches
#  to energies with free energy turned off.


mdp = fep_opls.mdp
# run parameter file for Gromacs;
# (will be searched as (1) absolute path, (2) in current directory (3)
# in the package templates)
# special index groups  __main__ __environment__ can be used

[FEP_schedule_Coulomb]
name = Coulomb
description = dis-charging vdw+q --> vdw
label = Coul
couple_lambda0 = vdw-q
couple_lambda1 = vdw
# soft core alpha: linear scaling for coulomb (sc_alpha = 0)
# ignore the other sc_*
sc_alpha = 0
lambdas = 0, 0.25, 0.5, 0.75, 1.0

[FEP_schedule_VDW]
name = vdw
description = decoupling vdw --> none
label = VDW
couple_lambda0 = vdw
couple_lambda1 = none
# recommended values for soft cores (Mobley, Shirts et al)
sc_alpha = 0.5
sc_power = 1
sc_sigma = 0.3
lambdas = 0.0, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1


[mdrun]
# options to control a mdrun process

stepout = 1000
# how often to report progress (-stepout)

verbose = True
# report progress verbosely (True is -v)

nice = 19
# nicel level

maxthreads = None
# maximum number of threads (-nt), 0 or None lets mdrun automatically choose
